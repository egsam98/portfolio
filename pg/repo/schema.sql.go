// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: schema.sql

package repo

import (
	"context"
	"time"

	"github.com/google/uuid"
	"gitlab.com/moderntoken/gateways/decimal"
)

const accounts_GetByName = `-- name: Accounts_GetByName :one
select id, name, exchange_name, key, secret, passphrase, aliases from accounts where name = $1
`

func (q *Queries) Accounts_GetByName(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRow(ctx, accounts_GetByName, name)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExchangeName,
		&i.Key,
		&i.Secret,
		&i.Passphrase,
		&i.Aliases,
	)
	return i, err
}

type PortfolioTriggers_CreateParams struct {
	ID             uuid.UUID
	PortfolioID    int64
	Type           string
	Currency       string
	Limit          *decimal.Decimal
	Percent        *decimal.Decimal
	TrailingAlert  bool
	StartTotalCost *decimal.Decimal
	CreatedAt      time.Time
}

const portfolioTriggers_Delete = `-- name: PortfolioTriggers_Delete :exec
delete from portfolio_triggers where id = $1
`

func (q *Queries) PortfolioTriggers_Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, portfolioTriggers_Delete, id)
	return err
}

const portfolioTriggers_DeleteByPortfolioID = `-- name: PortfolioTriggers_DeleteByPortfolioID :exec
delete from portfolio_triggers where portfolio_id = $1
`

func (q *Queries) PortfolioTriggers_DeleteByPortfolioID(ctx context.Context, portfolioID int64) error {
	_, err := q.db.Exec(ctx, portfolioTriggers_DeleteByPortfolioID, portfolioID)
	return err
}

const portfolioTriggers_UpdateStartTotalCost = `-- name: PortfolioTriggers_UpdateStartTotalCost :exec
update portfolio_triggers
set start_total_cost = $1 where id = $2 and type = 'COST_CHANGED_BY_PERCENT'
`

type PortfolioTriggers_UpdateStartTotalCostParams struct {
	StartTotalCost *decimal.Decimal
	ID             uuid.UUID
}

func (q *Queries) PortfolioTriggers_UpdateStartTotalCost(ctx context.Context, arg PortfolioTriggers_UpdateStartTotalCostParams) error {
	_, err := q.db.Exec(ctx, portfolioTriggers_UpdateStartTotalCost, arg.StartTotalCost, arg.ID)
	return err
}
