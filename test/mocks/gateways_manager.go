// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	core "gitlab.com/moderntoken/gateways/core"

	mock "github.com/stretchr/testify/mock"
)

// GatewaysManager is an autogenerated mock type for the Manager type
type GatewaysManager struct {
	mock.Mock
}

// Gateway provides a mock function with given fields: name
func (_m *GatewaysManager) Gateway(name string) (core.Gateway, bool) {
	ret := _m.Called(name)

	var r0 core.Gateway
	if rf, ok := ret.Get(0).(func(string) core.Gateway); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Gateway)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Status provides a mock function with given fields:
func (_m *GatewaysManager) Status() map[string]core.GatewayStatus {
	ret := _m.Called()

	var r0 map[string]core.GatewayStatus
	if rf, ok := ret.Get(0).(func() map[string]core.GatewayStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]core.GatewayStatus)
		}
	}

	return r0
}

type NewGatewaysManagerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGatewaysManager creates a new instance of GatewaysManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGatewaysManager(t NewGatewaysManagerT) *GatewaysManager {
	mock := &GatewaysManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
