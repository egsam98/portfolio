// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	core "gitlab.com/moderntoken/gateways/core"
)

// Account is an autogenerated mock type for the Account type
type Account struct {
	mock.Mock
}

// Balance provides a mock function with given fields: currency
func (_m *Account) Balance(currency core.Currency) (core.Balance, error) {
	ret := _m.Called(currency)

	var r0 core.Balance
	if rf, ok := ret.Get(0).(func(core.Currency) core.Balance); ok {
		r0 = rf(currency)
	} else {
		r0 = ret.Get(0).(core.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Currency) error); ok {
		r1 = rf(currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Balances provides a mock function with given fields:
func (_m *Account) Balances() (map[core.Currency]core.Balance, error) {
	ret := _m.Called()

	var r0 map[core.Currency]core.Balance
	if rf, ok := ret.Get(0).(func() map[core.Currency]core.Balance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[core.Currency]core.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrder provides a mock function with given fields: order
func (_m *Account) CancelOrder(order *core.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckReadyForTrade provides a mock function with given fields: symbol
func (_m *Account) CheckReadyForTrade(symbol core.Symbol) error {
	ret := _m.Called(symbol)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Symbol) error); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Account) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NotifyBalance provides a mock function with given fields: _a0
func (_m *Account) NotifyBalance(_a0 chan map[core.Currency]core.Balance) {
	_m.Called(_a0)
}

// PlaceOrder provides a mock function with given fields: order
func (_m *Account) PlaceOrder(order *core.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryOrder provides a mock function with given fields: order
func (_m *Account) QueryOrder(order *core.Order) error {
	ret := _m.Called(order)

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Release provides a mock function with given fields:
func (_m *Account) Release() {
	_m.Called()
}

// SetLeverage provides a mock function with given fields: symbol, leverage
func (_m *Account) SetLeverage(symbol core.Symbol, leverage int) error {
	ret := _m.Called(symbol, leverage)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Symbol, int) error); ok {
		r0 = rf(symbol, leverage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewAccountT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccount creates a new instance of Account. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccount(t NewAccountT) *Account {
	mock := &Account{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
