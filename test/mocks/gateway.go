// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	core "gitlab.com/moderntoken/gateways/core"
)

// Gateway is an autogenerated mock type for the Gateway type
type Gateway struct {
	mock.Mock
}

// Account provides a mock function with given fields: access
func (_m *Gateway) Account(access core.Auth) (core.Account, error) {
	ret := _m.Called(access)

	var r0 core.Account
	if rf, ok := ret.Get(0).(func(core.Auth) core.Account); ok {
		r0 = rf(access)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Auth) error); ok {
		r1 = rf(access)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllSymbols provides a mock function with given fields:
func (_m *Gateway) AllSymbols() []core.Symbol {
	ret := _m.Called()

	var r0 []core.Symbol
	if rf, ok := ret.Get(0).(func() []core.Symbol); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Symbol)
		}
	}

	return r0
}

// Fees provides a mock function with given fields:
func (_m *Gateway) Fees() core.Fees {
	ret := _m.Called()

	var r0 core.Fees
	if rf, ok := ret.Get(0).(func() core.Fees); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.Fees)
	}

	return r0
}

// Futures provides a mock function with given fields:
func (_m *Gateway) Futures() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Instrument provides a mock function with given fields: symbolName
func (_m *Gateway) Instrument(symbolName string) (core.Instrument, error) {
	ret := _m.Called(symbolName)

	var r0 core.Instrument
	if rf, ok := ret.Get(0).(func(string) core.Instrument); ok {
		r0 = rf(symbolName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Instrument)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbolName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Gateway) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Gateway) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Gateway) Status() core.GatewayStatus {
	ret := _m.Called()

	var r0 core.GatewayStatus
	if rf, ok := ret.Get(0).(func() core.GatewayStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.GatewayStatus)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Gateway) Stop() {
	_m.Called()
}

type NewGatewayT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGateway creates a new instance of Gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGateway(t NewGatewayT) *Gateway {
	mock := &Gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
