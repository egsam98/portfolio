// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/egsam98/portfolio/pg/repo"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// Accounts_GetByName provides a mock function with given fields: ctx, name
func (_m *Querier) Accounts_GetByName(ctx context.Context, name string) (repo.Account, error) {
	ret := _m.Called(ctx, name)

	var r0 repo.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) repo.Account); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(repo.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Accounts_SelectWithPortfolioTriggers provides a mock function with given fields: ctx
func (_m *Querier) Accounts_SelectWithPortfolioTriggers(ctx context.Context) ([]repo.Accounts_SelectWithPortfolioTriggersRow, error) {
	ret := _m.Called(ctx)

	var r0 []repo.Accounts_SelectWithPortfolioTriggersRow
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Accounts_SelectWithPortfolioTriggersRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Accounts_SelectWithPortfolioTriggersRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioTriggers_Create provides a mock function with given fields: ctx, arg
func (_m *Querier) PortfolioTriggers_Create(ctx context.Context, arg []repo.PortfolioTriggers_CreateParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, []repo.PortfolioTriggers_CreateParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []repo.PortfolioTriggers_CreateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortfolioTriggers_Delete provides a mock function with given fields: ctx, id
func (_m *Querier) PortfolioTriggers_Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PortfolioTriggers_DeleteByPortfolioID provides a mock function with given fields: ctx, portfolioID
func (_m *Querier) PortfolioTriggers_DeleteByPortfolioID(ctx context.Context, portfolioID int64) error {
	ret := _m.Called(ctx, portfolioID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, portfolioID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PortfolioTriggers_UpdateStartTotalCost provides a mock function with given fields: ctx, arg
func (_m *Querier) PortfolioTriggers_UpdateStartTotalCost(ctx context.Context, arg repo.PortfolioTriggers_UpdateStartTotalCostParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.PortfolioTriggers_UpdateStartTotalCostParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewQuerierT interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerier(t NewQuerierT) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
