// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	core "gitlab.com/moderntoken/gateways/core"
	decimal "gitlab.com/moderntoken/gateways/decimal"

	mock "github.com/stretchr/testify/mock"
)

// Instrument is an autogenerated mock type for the Instrument type
type Instrument struct {
	mock.Mock
}

// Bollinger provides a mock function with given fields:
func (_m *Instrument) Bollinger() (float64, float64) {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	return r0, r1
}

// GW provides a mock function with given fields:
func (_m *Instrument) GW() core.Gateway {
	ret := _m.Called()

	var r0 core.Gateway
	if rf, ok := ret.Get(0).(func() core.Gateway); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Gateway)
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *Instrument) Info() core.SymbolInfo {
	ret := _m.Called()

	var r0 core.SymbolInfo
	if rf, ok := ret.Get(0).(func() core.SymbolInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SymbolInfo)
	}

	return r0
}

// MACD provides a mock function with given fields:
func (_m *Instrument) MACD() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// OnPriceUpdate provides a mock function with given fields: handler
func (_m *Instrument) OnPriceUpdate(handler core.PriceUpdateHandler) {
	_m.Called(handler)
}

// Price provides a mock function with given fields:
func (_m *Instrument) Price() (decimal.Decimal, decimal.Decimal) {
	ret := _m.Called()

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func() decimal.Decimal); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	var r1 decimal.Decimal
	if rf, ok := ret.Get(1).(func() decimal.Decimal); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(decimal.Decimal)
	}

	return r0, r1
}

// RSI provides a mock function with given fields:
func (_m *Instrument) RSI() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Release provides a mock function with given fields:
func (_m *Instrument) Release() {
	_m.Called()
}

// Symbol provides a mock function with given fields:
func (_m *Instrument) Symbol() core.Symbol {
	ret := _m.Called()

	var r0 core.Symbol
	if rf, ok := ret.Get(0).(func() core.Symbol); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.Symbol)
	}

	return r0
}

// Validate provides a mock function with given fields: side, typ, price, qty
func (_m *Instrument) Validate(side core.OrderSide, typ core.OrderType, price decimal.Decimal, qty decimal.Decimal) error {
	ret := _m.Called(side, typ, price, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.OrderSide, core.OrderType, decimal.Decimal, decimal.Decimal) error); ok {
		r0 = rf(side, typ, price, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewInstrumentT interface {
	mock.TestingT
	Cleanup(func())
}

// NewInstrument creates a new instance of Instrument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInstrument(t NewInstrumentT) *Instrument {
	mock := &Instrument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
